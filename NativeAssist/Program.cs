// See https://aka.ms/new-console-template for more information
using NativeAssist;
using NativeRefHelper.Models;
using System.Diagnostics;
using System.Text.Json;

var l = Util.Logger;

l.Information("Starting NativeAssist");

Dictionary<string, Dictionary<string, NativeFunction>>? natives;

await Network.GetLatestJson();

// Parse native data
if (File.Exists("natives_latest.json"))
{
    // Use stream to parse file
    using var stream = File.OpenRead("natives_latest.json");
    natives = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, NativeFunction>>>(stream);
}
else
{
    // Otherwise, use string
    natives = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, NativeFunction>>>(
    NativeAssist.Properties.Resources.natives);
}

using var str = File.Create("Natives.cs");
using var writer = new StreamWriter(str);

if (natives == null)
{
    l.Fatal("Native data parsing failed");
    return -1;
}

var sw = new Stopwatch();
l.Information("Starting native generation");
sw.Start();

writer.WriteLine("// Generated by Native Wrapper Generator, for NativeFx");
writer.WriteLine("// {0} | DO NOT MODIFY UNLESS REQUIRED", DateTime.Now);
writer.WriteLine(@"namespace NativeFx.Interop;
using System;
using GTA.Native;
using GTA;
using GTA.Math;

public static class Natives 
{");


foreach (var ns in natives)
{
    Console.WriteLine("NS {0}", ns.Key);
    writer.WriteLine($"#region {ns.Key}");   

    foreach (var native in ns.Value)
    {
        Util.OperateNative(native.Value, native.Key, writer);
    }

    writer.WriteLine($"#endregion");
}

writer.WriteLine("}");

sw.Stop();

l.Information($"Generator done, {sw.ElapsedMilliseconds}ms ({sw.Elapsed}) elpased");

return 0;